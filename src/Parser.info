-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Parser.y
-----------------------------------------------------------------------------

state 8 contains 1 shift/reduce conflicts.
state 85 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Term                               (0)
	Term -> app "(" Term "," Term ")"                  (1)
	Term -> intT                                       (2)
	Term -> true                                       (3)
	Term -> false                                      (4)
	Term -> unitTerm                                   (5)
	Term -> id                                         (6)
	Term -> modId Subs                                 (7)
	Term -> modId                                      (8)
	Term -> "\\" id "." Term                           (9)
	Term -> "λ" id "." Term                            (10)
	Term -> fst Term                                   (11)
	Term -> snd Term                                   (12)
	Term -> "⟨" Term "," Term "⟩"                      (13)
	Term -> inl Term                                   (14)
	Term -> inr Term                                   (15)
	Term -> "(" Term ")"                               (16)
	Term -> "@" Term ":" Type                          (17)
	Term -> box Context "." Term                       (18)
	Term -> box Term                                   (19)
	Term -> let box modId "=" Term in Term             (20)
	Term -> let val id "=" Term in Term                (21)
	Term -> "(" "+" Term Term ")"                      (22)
	Context -> "[" "]"                                 (23)
	Context -> "[" CtxElems "]"                        (24)
	CtxElems -> CtxElem                                (25)
	CtxElems -> CtxElems "," CtxElem                   (26)
	CtxElem -> id ":" Type                             (27)
	Subs -> "⟨" "⟩"                                    (28)
	Subs -> "⟨" SubElems "⟩"                           (29)
	SubElems -> SubElem                                (30)
	SubElems -> SubElems "," SubElem                   (31)
	SubElem -> id "→" Term                             (32)
	Type -> Type "→" Type                              (33)
	Type -> Type "×" Type                              (34)
	Type -> Type "+" Type                              (35)
	Type -> "(" Type ")"                               (36)
	Type -> "☐" Type                                   (37)
	Type -> Context Type                               (38)
	Type -> id                                         (39)
	Type -> bool                                       (40)
	Type -> int                                        (41)
	Type -> unit                                       (42)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	unit           { UnitTyTok }
	int            { IntTyTok }
	bool           { BoolTyTok }
	"="            { EqualTok }
	"→"            { ArrowTok }
	"×"            { ProdTyTok }
	"+"            { SumTok }
	"☐"            { EmptyCtxTok }
	"@"            { AnnTok }
	":"            { AnnSepTok }
	app            { AppTok }
	","            { CommaTok }
	"("            { LParen }
	")"            { RParen }
	"⟨"            { LAngleTok }
	"⟩"            { RAngleTok }
	"["            { LBrackTok }
	"]"            { RBrackTok }
	id             { IdTok $$ }
	modId          { ModIdTok $$ }
	intT           { IntTok $$ }
	true           { TrueTok }
	false          { FalseTok }
	unitTerm       { UnitTermTok }
	"\\"           { LambdaTok }
	"λ"            { LambdaTok }
	"."            { LambdaBodyTok }
	fst            { FstTok }
	snd            { SndTok }
	inl            { InlTok }
	inr            { InrTok }
	let            { LetTok }
	box            { BoxTok }
	val            { ValTok }
	in             { InTok }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Term            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	Context         rules 23, 24
	CtxElems        rules 25, 26
	CtxElem         rule  27
	Subs            rules 28, 29
	SubElems        rules 30, 31
	SubElem         rule  32
	Type            rules 33, 34, 35, 36, 37, 38, 39, 40, 41, 42

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 3

State 1


	app            shift, and enter state 2


State 2

	Term -> app . "(" Term "," Term ")"                 (rule 1)

	"("            shift, and enter state 38


State 3

	%start_parse -> Term .                              (rule 0)

	%eof           accept


State 4

	Term -> "@" . Term ":" Type                         (rule 17)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 37

State 5

	Term -> "(" . Term ")"                              (rule 16)
	Term -> "(" . "+" Term Term ")"                     (rule 22)

	"+"            shift, and enter state 36
	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 35

State 6

	Term -> "⟨" . Term "," Term "⟩"                     (rule 13)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 34

State 7

	Term -> id .                                        (rule 6)

	"@"            reduce using rule 6
	":"            reduce using rule 6
	app            reduce using rule 6
	","            reduce using rule 6
	"("            reduce using rule 6
	")"            reduce using rule 6
	"⟨"            reduce using rule 6
	"⟩"            reduce using rule 6
	id             reduce using rule 6
	modId          reduce using rule 6
	intT           reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	unitTerm       reduce using rule 6
	"\\"           reduce using rule 6
	"λ"            reduce using rule 6
	fst            reduce using rule 6
	snd            reduce using rule 6
	inl            reduce using rule 6
	inr            reduce using rule 6
	let            reduce using rule 6
	box            reduce using rule 6
	in             reduce using rule 6
	%eof           reduce using rule 6


State 8

	Term -> modId . Subs                                (rule 7)
	Term -> modId .                                     (rule 8)

	"@"            reduce using rule 8
	":"            reduce using rule 8
	app            reduce using rule 8
	","            reduce using rule 8
	"("            reduce using rule 8
	")"            reduce using rule 8
	"⟨"            shift, and enter state 33
			(reduce using rule 8)

	"⟩"            reduce using rule 8
	id             reduce using rule 8
	modId          reduce using rule 8
	intT           reduce using rule 8
	true           reduce using rule 8
	false          reduce using rule 8
	unitTerm       reduce using rule 8
	"\\"           reduce using rule 8
	"λ"            reduce using rule 8
	fst            reduce using rule 8
	snd            reduce using rule 8
	inl            reduce using rule 8
	inr            reduce using rule 8
	let            reduce using rule 8
	box            reduce using rule 8
	in             reduce using rule 8
	%eof           reduce using rule 8

	Subs           goto state 32

State 9

	Term -> intT .                                      (rule 2)

	"@"            reduce using rule 2
	":"            reduce using rule 2
	app            reduce using rule 2
	","            reduce using rule 2
	"("            reduce using rule 2
	")"            reduce using rule 2
	"⟨"            reduce using rule 2
	"⟩"            reduce using rule 2
	id             reduce using rule 2
	modId          reduce using rule 2
	intT           reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	unitTerm       reduce using rule 2
	"\\"           reduce using rule 2
	"λ"            reduce using rule 2
	fst            reduce using rule 2
	snd            reduce using rule 2
	inl            reduce using rule 2
	inr            reduce using rule 2
	let            reduce using rule 2
	box            reduce using rule 2
	in             reduce using rule 2
	%eof           reduce using rule 2


State 10

	Term -> true .                                      (rule 3)

	"@"            reduce using rule 3
	":"            reduce using rule 3
	app            reduce using rule 3
	","            reduce using rule 3
	"("            reduce using rule 3
	")"            reduce using rule 3
	"⟨"            reduce using rule 3
	"⟩"            reduce using rule 3
	id             reduce using rule 3
	modId          reduce using rule 3
	intT           reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	unitTerm       reduce using rule 3
	"\\"           reduce using rule 3
	"λ"            reduce using rule 3
	fst            reduce using rule 3
	snd            reduce using rule 3
	inl            reduce using rule 3
	inr            reduce using rule 3
	let            reduce using rule 3
	box            reduce using rule 3
	in             reduce using rule 3
	%eof           reduce using rule 3


State 11

	Term -> false .                                     (rule 4)

	"@"            reduce using rule 4
	":"            reduce using rule 4
	app            reduce using rule 4
	","            reduce using rule 4
	"("            reduce using rule 4
	")"            reduce using rule 4
	"⟨"            reduce using rule 4
	"⟩"            reduce using rule 4
	id             reduce using rule 4
	modId          reduce using rule 4
	intT           reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	unitTerm       reduce using rule 4
	"\\"           reduce using rule 4
	"λ"            reduce using rule 4
	fst            reduce using rule 4
	snd            reduce using rule 4
	inl            reduce using rule 4
	inr            reduce using rule 4
	let            reduce using rule 4
	box            reduce using rule 4
	in             reduce using rule 4
	%eof           reduce using rule 4


State 12

	Term -> unitTerm .                                  (rule 5)

	"@"            reduce using rule 5
	":"            reduce using rule 5
	app            reduce using rule 5
	","            reduce using rule 5
	"("            reduce using rule 5
	")"            reduce using rule 5
	"⟨"            reduce using rule 5
	"⟩"            reduce using rule 5
	id             reduce using rule 5
	modId          reduce using rule 5
	intT           reduce using rule 5
	true           reduce using rule 5
	false          reduce using rule 5
	unitTerm       reduce using rule 5
	"\\"           reduce using rule 5
	"λ"            reduce using rule 5
	fst            reduce using rule 5
	snd            reduce using rule 5
	inl            reduce using rule 5
	inr            reduce using rule 5
	let            reduce using rule 5
	box            reduce using rule 5
	in             reduce using rule 5
	%eof           reduce using rule 5


State 13

	Term -> "\\" . id "." Term                          (rule 9)

	id             shift, and enter state 31


State 14

	Term -> "λ" . id "." Term                           (rule 10)

	id             shift, and enter state 30


State 15

	Term -> fst . Term                                  (rule 11)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 29

State 16

	Term -> snd . Term                                  (rule 12)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 28

State 17

	Term -> inl . Term                                  (rule 14)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 27

State 18

	Term -> inr . Term                                  (rule 15)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 26

State 19

	Term -> let . box modId "=" Term in Term            (rule 20)
	Term -> let . val id "=" Term in Term               (rule 21)

	box            shift, and enter state 24
	val            shift, and enter state 25


State 20

	Term -> box . Context "." Term                      (rule 18)
	Term -> box . Term                                  (rule 19)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	"["            shift, and enter state 23
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 21
	Context        goto state 22

State 21

	Term -> box Term .                                  (rule 19)

	"@"            reduce using rule 19
	":"            reduce using rule 19
	app            reduce using rule 19
	","            reduce using rule 19
	"("            reduce using rule 19
	")"            reduce using rule 19
	"⟨"            reduce using rule 19
	"⟩"            reduce using rule 19
	id             reduce using rule 19
	modId          reduce using rule 19
	intT           reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	unitTerm       reduce using rule 19
	"\\"           reduce using rule 19
	"λ"            reduce using rule 19
	fst            reduce using rule 19
	snd            reduce using rule 19
	inl            reduce using rule 19
	inr            reduce using rule 19
	let            reduce using rule 19
	box            reduce using rule 19
	in             reduce using rule 19
	%eof           reduce using rule 19


State 22

	Term -> box Context . "." Term                      (rule 18)

	"."            shift, and enter state 56


State 23

	Context -> "[" . "]"                                (rule 23)
	Context -> "[" . CtxElems "]"                       (rule 24)

	"]"            shift, and enter state 54
	id             shift, and enter state 55

	CtxElems       goto state 52
	CtxElem        goto state 53

State 24

	Term -> let box . modId "=" Term in Term            (rule 20)

	modId          shift, and enter state 51


State 25

	Term -> let val . id "=" Term in Term               (rule 21)

	id             shift, and enter state 50


State 26

	Term -> inr Term .                                  (rule 15)

	"@"            reduce using rule 15
	":"            reduce using rule 15
	app            reduce using rule 15
	","            reduce using rule 15
	"("            reduce using rule 15
	")"            reduce using rule 15
	"⟨"            reduce using rule 15
	"⟩"            reduce using rule 15
	id             reduce using rule 15
	modId          reduce using rule 15
	intT           reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	unitTerm       reduce using rule 15
	"\\"           reduce using rule 15
	"λ"            reduce using rule 15
	fst            reduce using rule 15
	snd            reduce using rule 15
	inl            reduce using rule 15
	inr            reduce using rule 15
	let            reduce using rule 15
	box            reduce using rule 15
	in             reduce using rule 15
	%eof           reduce using rule 15


State 27

	Term -> inl Term .                                  (rule 14)

	"@"            reduce using rule 14
	":"            reduce using rule 14
	app            reduce using rule 14
	","            reduce using rule 14
	"("            reduce using rule 14
	")"            reduce using rule 14
	"⟨"            reduce using rule 14
	"⟩"            reduce using rule 14
	id             reduce using rule 14
	modId          reduce using rule 14
	intT           reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	unitTerm       reduce using rule 14
	"\\"           reduce using rule 14
	"λ"            reduce using rule 14
	fst            reduce using rule 14
	snd            reduce using rule 14
	inl            reduce using rule 14
	inr            reduce using rule 14
	let            reduce using rule 14
	box            reduce using rule 14
	in             reduce using rule 14
	%eof           reduce using rule 14


State 28

	Term -> snd Term .                                  (rule 12)

	"@"            reduce using rule 12
	":"            reduce using rule 12
	app            reduce using rule 12
	","            reduce using rule 12
	"("            reduce using rule 12
	")"            reduce using rule 12
	"⟨"            reduce using rule 12
	"⟩"            reduce using rule 12
	id             reduce using rule 12
	modId          reduce using rule 12
	intT           reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	unitTerm       reduce using rule 12
	"\\"           reduce using rule 12
	"λ"            reduce using rule 12
	fst            reduce using rule 12
	snd            reduce using rule 12
	inl            reduce using rule 12
	inr            reduce using rule 12
	let            reduce using rule 12
	box            reduce using rule 12
	in             reduce using rule 12
	%eof           reduce using rule 12


State 29

	Term -> fst Term .                                  (rule 11)

	"@"            reduce using rule 11
	":"            reduce using rule 11
	app            reduce using rule 11
	","            reduce using rule 11
	"("            reduce using rule 11
	")"            reduce using rule 11
	"⟨"            reduce using rule 11
	"⟩"            reduce using rule 11
	id             reduce using rule 11
	modId          reduce using rule 11
	intT           reduce using rule 11
	true           reduce using rule 11
	false          reduce using rule 11
	unitTerm       reduce using rule 11
	"\\"           reduce using rule 11
	"λ"            reduce using rule 11
	fst            reduce using rule 11
	snd            reduce using rule 11
	inl            reduce using rule 11
	inr            reduce using rule 11
	let            reduce using rule 11
	box            reduce using rule 11
	in             reduce using rule 11
	%eof           reduce using rule 11


State 30

	Term -> "λ" id . "." Term                           (rule 10)

	"."            shift, and enter state 49


State 31

	Term -> "\\" id . "." Term                          (rule 9)

	"."            shift, and enter state 48


State 32

	Term -> modId Subs .                                (rule 7)

	"@"            reduce using rule 7
	":"            reduce using rule 7
	app            reduce using rule 7
	","            reduce using rule 7
	"("            reduce using rule 7
	")"            reduce using rule 7
	"⟨"            reduce using rule 7
	"⟩"            reduce using rule 7
	id             reduce using rule 7
	modId          reduce using rule 7
	intT           reduce using rule 7
	true           reduce using rule 7
	false          reduce using rule 7
	unitTerm       reduce using rule 7
	"\\"           reduce using rule 7
	"λ"            reduce using rule 7
	fst            reduce using rule 7
	snd            reduce using rule 7
	inl            reduce using rule 7
	inr            reduce using rule 7
	let            reduce using rule 7
	box            reduce using rule 7
	in             reduce using rule 7
	%eof           reduce using rule 7


State 33

	Subs -> "⟨" . "⟩"                                   (rule 28)
	Subs -> "⟨" . SubElems "⟩"                          (rule 29)

	"⟩"            shift, and enter state 46
	id             shift, and enter state 47

	SubElems       goto state 44
	SubElem        goto state 45

State 34

	Term -> "⟨" Term . "," Term "⟩"                     (rule 13)

	","            shift, and enter state 43


State 35

	Term -> "(" Term . ")"                              (rule 16)

	")"            shift, and enter state 42


State 36

	Term -> "(" "+" . Term Term ")"                     (rule 22)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 41

State 37

	Term -> "@" Term . ":" Type                         (rule 17)

	":"            shift, and enter state 40


State 38

	Term -> app "(" . Term "," Term ")"                 (rule 1)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 39

State 39

	Term -> app "(" Term . "," Term ")"                 (rule 1)

	","            shift, and enter state 78


State 40

	Term -> "@" Term ":" . Type                         (rule 17)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 71

State 41

	Term -> "(" "+" Term . Term ")"                     (rule 22)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 69

State 42

	Term -> "(" Term ")" .                              (rule 16)

	"@"            reduce using rule 16
	":"            reduce using rule 16
	app            reduce using rule 16
	","            reduce using rule 16
	"("            reduce using rule 16
	")"            reduce using rule 16
	"⟨"            reduce using rule 16
	"⟩"            reduce using rule 16
	id             reduce using rule 16
	modId          reduce using rule 16
	intT           reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	unitTerm       reduce using rule 16
	"\\"           reduce using rule 16
	"λ"            reduce using rule 16
	fst            reduce using rule 16
	snd            reduce using rule 16
	inl            reduce using rule 16
	inr            reduce using rule 16
	let            reduce using rule 16
	box            reduce using rule 16
	in             reduce using rule 16
	%eof           reduce using rule 16


State 43

	Term -> "⟨" Term "," . Term "⟩"                     (rule 13)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 68

State 44

	Subs -> "⟨" SubElems . "⟩"                          (rule 29)
	SubElems -> SubElems . "," SubElem                  (rule 31)

	","            shift, and enter state 66
	"⟩"            shift, and enter state 67


State 45

	SubElems -> SubElem .                               (rule 30)

	","            reduce using rule 30
	"⟩"            reduce using rule 30


State 46

	Subs -> "⟨" "⟩" .                                   (rule 28)

	"@"            reduce using rule 28
	":"            reduce using rule 28
	app            reduce using rule 28
	","            reduce using rule 28
	"("            reduce using rule 28
	")"            reduce using rule 28
	"⟨"            reduce using rule 28
	"⟩"            reduce using rule 28
	id             reduce using rule 28
	modId          reduce using rule 28
	intT           reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	unitTerm       reduce using rule 28
	"\\"           reduce using rule 28
	"λ"            reduce using rule 28
	fst            reduce using rule 28
	snd            reduce using rule 28
	inl            reduce using rule 28
	inr            reduce using rule 28
	let            reduce using rule 28
	box            reduce using rule 28
	in             reduce using rule 28
	%eof           reduce using rule 28


State 47

	SubElem -> id . "→" Term                            (rule 32)

	"→"            shift, and enter state 65


State 48

	Term -> "\\" id "." . Term                          (rule 9)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 64

State 49

	Term -> "λ" id "." . Term                           (rule 10)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 63

State 50

	Term -> let val id . "=" Term in Term               (rule 21)

	"="            shift, and enter state 62


State 51

	Term -> let box modId . "=" Term in Term            (rule 20)

	"="            shift, and enter state 61


State 52

	Context -> "[" CtxElems . "]"                       (rule 24)
	CtxElems -> CtxElems . "," CtxElem                  (rule 26)

	","            shift, and enter state 59
	"]"            shift, and enter state 60


State 53

	CtxElems -> CtxElem .                               (rule 25)

	","            reduce using rule 25
	"]"            reduce using rule 25


State 54

	Context -> "[" "]" .                                (rule 23)

	unit           reduce using rule 23
	int            reduce using rule 23
	bool           reduce using rule 23
	"☐"            reduce using rule 23
	"("            reduce using rule 23
	"["            reduce using rule 23
	id             reduce using rule 23
	"."            reduce using rule 23


State 55

	CtxElem -> id . ":" Type                            (rule 27)

	":"            shift, and enter state 58


State 56

	Term -> box Context "." . Term                      (rule 18)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 57

State 57

	Term -> box Context "." Term .                      (rule 18)

	"@"            reduce using rule 18
	":"            reduce using rule 18
	app            reduce using rule 18
	","            reduce using rule 18
	"("            reduce using rule 18
	")"            reduce using rule 18
	"⟨"            reduce using rule 18
	"⟩"            reduce using rule 18
	id             reduce using rule 18
	modId          reduce using rule 18
	intT           reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	unitTerm       reduce using rule 18
	"\\"           reduce using rule 18
	"λ"            reduce using rule 18
	fst            reduce using rule 18
	snd            reduce using rule 18
	inl            reduce using rule 18
	inr            reduce using rule 18
	let            reduce using rule 18
	box            reduce using rule 18
	in             reduce using rule 18
	%eof           reduce using rule 18


State 58

	CtxElem -> id ":" . Type                            (rule 27)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 93

State 59

	CtxElems -> CtxElems "," . CtxElem                  (rule 26)

	id             shift, and enter state 55

	CtxElem        goto state 92

State 60

	Context -> "[" CtxElems "]" .                       (rule 24)

	unit           reduce using rule 24
	int            reduce using rule 24
	bool           reduce using rule 24
	"☐"            reduce using rule 24
	"("            reduce using rule 24
	"["            reduce using rule 24
	id             reduce using rule 24
	"."            reduce using rule 24


State 61

	Term -> let box modId "=" . Term in Term            (rule 20)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 91

State 62

	Term -> let val id "=" . Term in Term               (rule 21)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 90

State 63

	Term -> "λ" id "." Term .                           (rule 10)

	"@"            reduce using rule 10
	":"            reduce using rule 10
	app            reduce using rule 10
	","            reduce using rule 10
	"("            reduce using rule 10
	")"            reduce using rule 10
	"⟨"            reduce using rule 10
	"⟩"            reduce using rule 10
	id             reduce using rule 10
	modId          reduce using rule 10
	intT           reduce using rule 10
	true           reduce using rule 10
	false          reduce using rule 10
	unitTerm       reduce using rule 10
	"\\"           reduce using rule 10
	"λ"            reduce using rule 10
	fst            reduce using rule 10
	snd            reduce using rule 10
	inl            reduce using rule 10
	inr            reduce using rule 10
	let            reduce using rule 10
	box            reduce using rule 10
	in             reduce using rule 10
	%eof           reduce using rule 10


State 64

	Term -> "\\" id "." Term .                          (rule 9)

	"@"            reduce using rule 9
	":"            reduce using rule 9
	app            reduce using rule 9
	","            reduce using rule 9
	"("            reduce using rule 9
	")"            reduce using rule 9
	"⟨"            reduce using rule 9
	"⟩"            reduce using rule 9
	id             reduce using rule 9
	modId          reduce using rule 9
	intT           reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	unitTerm       reduce using rule 9
	"\\"           reduce using rule 9
	"λ"            reduce using rule 9
	fst            reduce using rule 9
	snd            reduce using rule 9
	inl            reduce using rule 9
	inr            reduce using rule 9
	let            reduce using rule 9
	box            reduce using rule 9
	in             reduce using rule 9
	%eof           reduce using rule 9


State 65

	SubElem -> id "→" . Term                            (rule 32)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 89

State 66

	SubElems -> SubElems "," . SubElem                  (rule 31)

	id             shift, and enter state 47

	SubElem        goto state 88

State 67

	Subs -> "⟨" SubElems "⟩" .                          (rule 29)

	"@"            reduce using rule 29
	":"            reduce using rule 29
	app            reduce using rule 29
	","            reduce using rule 29
	"("            reduce using rule 29
	")"            reduce using rule 29
	"⟨"            reduce using rule 29
	"⟩"            reduce using rule 29
	id             reduce using rule 29
	modId          reduce using rule 29
	intT           reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	unitTerm       reduce using rule 29
	"\\"           reduce using rule 29
	"λ"            reduce using rule 29
	fst            reduce using rule 29
	snd            reduce using rule 29
	inl            reduce using rule 29
	inr            reduce using rule 29
	let            reduce using rule 29
	box            reduce using rule 29
	in             reduce using rule 29
	%eof           reduce using rule 29


State 68

	Term -> "⟨" Term "," Term . "⟩"                     (rule 13)

	"⟩"            shift, and enter state 87


State 69

	Term -> "(" "+" Term Term . ")"                     (rule 22)

	")"            shift, and enter state 86


State 70

	Type -> Context . Type                              (rule 38)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 85

State 71

	Term -> "@" Term ":" Type .                         (rule 17)
	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)

	"→"            shift, and enter state 82
	"×"            shift, and enter state 83
	"+"            shift, and enter state 84
	"@"            reduce using rule 17
	":"            reduce using rule 17
	app            reduce using rule 17
	","            reduce using rule 17
	"("            reduce using rule 17
	")"            reduce using rule 17
	"⟨"            reduce using rule 17
	"⟩"            reduce using rule 17
	id             reduce using rule 17
	modId          reduce using rule 17
	intT           reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	unitTerm       reduce using rule 17
	"\\"           reduce using rule 17
	"λ"            reduce using rule 17
	fst            reduce using rule 17
	snd            reduce using rule 17
	inl            reduce using rule 17
	inr            reduce using rule 17
	let            reduce using rule 17
	box            reduce using rule 17
	in             reduce using rule 17
	%eof           reduce using rule 17


State 72

	Type -> unit .                                      (rule 42)

	"→"            reduce using rule 42
	"×"            reduce using rule 42
	"+"            reduce using rule 42
	"@"            reduce using rule 42
	":"            reduce using rule 42
	app            reduce using rule 42
	","            reduce using rule 42
	"("            reduce using rule 42
	")"            reduce using rule 42
	"⟨"            reduce using rule 42
	"⟩"            reduce using rule 42
	"]"            reduce using rule 42
	id             reduce using rule 42
	modId          reduce using rule 42
	intT           reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	unitTerm       reduce using rule 42
	"\\"           reduce using rule 42
	"λ"            reduce using rule 42
	fst            reduce using rule 42
	snd            reduce using rule 42
	inl            reduce using rule 42
	inr            reduce using rule 42
	let            reduce using rule 42
	box            reduce using rule 42
	in             reduce using rule 42
	%eof           reduce using rule 42


State 73

	Type -> int .                                       (rule 41)

	"→"            reduce using rule 41
	"×"            reduce using rule 41
	"+"            reduce using rule 41
	"@"            reduce using rule 41
	":"            reduce using rule 41
	app            reduce using rule 41
	","            reduce using rule 41
	"("            reduce using rule 41
	")"            reduce using rule 41
	"⟨"            reduce using rule 41
	"⟩"            reduce using rule 41
	"]"            reduce using rule 41
	id             reduce using rule 41
	modId          reduce using rule 41
	intT           reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	unitTerm       reduce using rule 41
	"\\"           reduce using rule 41
	"λ"            reduce using rule 41
	fst            reduce using rule 41
	snd            reduce using rule 41
	inl            reduce using rule 41
	inr            reduce using rule 41
	let            reduce using rule 41
	box            reduce using rule 41
	in             reduce using rule 41
	%eof           reduce using rule 41


State 74

	Type -> bool .                                      (rule 40)

	"→"            reduce using rule 40
	"×"            reduce using rule 40
	"+"            reduce using rule 40
	"@"            reduce using rule 40
	":"            reduce using rule 40
	app            reduce using rule 40
	","            reduce using rule 40
	"("            reduce using rule 40
	")"            reduce using rule 40
	"⟨"            reduce using rule 40
	"⟩"            reduce using rule 40
	"]"            reduce using rule 40
	id             reduce using rule 40
	modId          reduce using rule 40
	intT           reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	unitTerm       reduce using rule 40
	"\\"           reduce using rule 40
	"λ"            reduce using rule 40
	fst            reduce using rule 40
	snd            reduce using rule 40
	inl            reduce using rule 40
	inr            reduce using rule 40
	let            reduce using rule 40
	box            reduce using rule 40
	in             reduce using rule 40
	%eof           reduce using rule 40


State 75

	Type -> "☐" . Type                                  (rule 37)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 81

State 76

	Type -> "(" . Type ")"                              (rule 36)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 80

State 77

	Type -> id .                                        (rule 39)

	"→"            reduce using rule 39
	"×"            reduce using rule 39
	"+"            reduce using rule 39
	"@"            reduce using rule 39
	":"            reduce using rule 39
	app            reduce using rule 39
	","            reduce using rule 39
	"("            reduce using rule 39
	")"            reduce using rule 39
	"⟨"            reduce using rule 39
	"⟩"            reduce using rule 39
	"]"            reduce using rule 39
	id             reduce using rule 39
	modId          reduce using rule 39
	intT           reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	unitTerm       reduce using rule 39
	"\\"           reduce using rule 39
	"λ"            reduce using rule 39
	fst            reduce using rule 39
	snd            reduce using rule 39
	inl            reduce using rule 39
	inr            reduce using rule 39
	let            reduce using rule 39
	box            reduce using rule 39
	in             reduce using rule 39
	%eof           reduce using rule 39


State 78

	Term -> app "(" Term "," . Term ")"                 (rule 1)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 79

State 79

	Term -> app "(" Term "," Term . ")"                 (rule 1)

	")"            shift, and enter state 100


State 80

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)
	Type -> "(" Type . ")"                              (rule 36)

	"→"            shift, and enter state 82
	"×"            shift, and enter state 83
	"+"            shift, and enter state 84
	")"            shift, and enter state 99


State 81

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)
	Type -> "☐" Type .                                  (rule 37)

	"→"            reduce using rule 37
	"×"            shift, and enter state 83
	"+"            shift, and enter state 84
	"@"            reduce using rule 37
	":"            reduce using rule 37
	app            reduce using rule 37
	","            reduce using rule 37
	"("            reduce using rule 37
	")"            reduce using rule 37
	"⟨"            reduce using rule 37
	"⟩"            reduce using rule 37
	"]"            reduce using rule 37
	id             reduce using rule 37
	modId          reduce using rule 37
	intT           reduce using rule 37
	true           reduce using rule 37
	false          reduce using rule 37
	unitTerm       reduce using rule 37
	"\\"           reduce using rule 37
	"λ"            reduce using rule 37
	fst            reduce using rule 37
	snd            reduce using rule 37
	inl            reduce using rule 37
	inr            reduce using rule 37
	let            reduce using rule 37
	box            reduce using rule 37
	in             reduce using rule 37
	%eof           reduce using rule 37


State 82

	Type -> Type "→" . Type                             (rule 33)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 98

State 83

	Type -> Type "×" . Type                             (rule 34)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 97

State 84

	Type -> Type "+" . Type                             (rule 35)

	unit           shift, and enter state 72
	int            shift, and enter state 73
	bool           shift, and enter state 74
	"☐"            shift, and enter state 75
	"("            shift, and enter state 76
	"["            shift, and enter state 23
	id             shift, and enter state 77

	Context        goto state 70
	Type           goto state 96

State 85

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)
	Type -> Context Type .                              (rule 38)

	"→"            shift, and enter state 82
			(reduce using rule 38)

	"×"            shift, and enter state 83
			(reduce using rule 38)

	"+"            shift, and enter state 84
			(reduce using rule 38)

	"@"            reduce using rule 38
	":"            reduce using rule 38
	app            reduce using rule 38
	","            reduce using rule 38
	"("            reduce using rule 38
	")"            reduce using rule 38
	"⟨"            reduce using rule 38
	"⟩"            reduce using rule 38
	"]"            reduce using rule 38
	id             reduce using rule 38
	modId          reduce using rule 38
	intT           reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	unitTerm       reduce using rule 38
	"\\"           reduce using rule 38
	"λ"            reduce using rule 38
	fst            reduce using rule 38
	snd            reduce using rule 38
	inl            reduce using rule 38
	inr            reduce using rule 38
	let            reduce using rule 38
	box            reduce using rule 38
	in             reduce using rule 38
	%eof           reduce using rule 38


State 86

	Term -> "(" "+" Term Term ")" .                     (rule 22)

	"@"            reduce using rule 22
	":"            reduce using rule 22
	app            reduce using rule 22
	","            reduce using rule 22
	"("            reduce using rule 22
	")"            reduce using rule 22
	"⟨"            reduce using rule 22
	"⟩"            reduce using rule 22
	id             reduce using rule 22
	modId          reduce using rule 22
	intT           reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	unitTerm       reduce using rule 22
	"\\"           reduce using rule 22
	"λ"            reduce using rule 22
	fst            reduce using rule 22
	snd            reduce using rule 22
	inl            reduce using rule 22
	inr            reduce using rule 22
	let            reduce using rule 22
	box            reduce using rule 22
	in             reduce using rule 22
	%eof           reduce using rule 22


State 87

	Term -> "⟨" Term "," Term "⟩" .                     (rule 13)

	"@"            reduce using rule 13
	":"            reduce using rule 13
	app            reduce using rule 13
	","            reduce using rule 13
	"("            reduce using rule 13
	")"            reduce using rule 13
	"⟨"            reduce using rule 13
	"⟩"            reduce using rule 13
	id             reduce using rule 13
	modId          reduce using rule 13
	intT           reduce using rule 13
	true           reduce using rule 13
	false          reduce using rule 13
	unitTerm       reduce using rule 13
	"\\"           reduce using rule 13
	"λ"            reduce using rule 13
	fst            reduce using rule 13
	snd            reduce using rule 13
	inl            reduce using rule 13
	inr            reduce using rule 13
	let            reduce using rule 13
	box            reduce using rule 13
	in             reduce using rule 13
	%eof           reduce using rule 13


State 88

	SubElems -> SubElems "," SubElem .                  (rule 31)

	","            reduce using rule 31
	"⟩"            reduce using rule 31


State 89

	SubElem -> id "→" Term .                            (rule 32)

	","            reduce using rule 32
	"⟩"            reduce using rule 32


State 90

	Term -> let val id "=" Term . in Term               (rule 21)

	in             shift, and enter state 95


State 91

	Term -> let box modId "=" Term . in Term            (rule 20)

	in             shift, and enter state 94


State 92

	CtxElems -> CtxElems "," CtxElem .                  (rule 26)

	","            reduce using rule 26
	"]"            reduce using rule 26


State 93

	CtxElem -> id ":" Type .                            (rule 27)
	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)

	"→"            shift, and enter state 82
	"×"            shift, and enter state 83
	"+"            shift, and enter state 84
	","            reduce using rule 27
	"]"            reduce using rule 27


State 94

	Term -> let box modId "=" Term in . Term            (rule 20)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 102

State 95

	Term -> let val id "=" Term in . Term               (rule 21)

	"@"            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	"⟨"            shift, and enter state 6
	id             shift, and enter state 7
	modId          shift, and enter state 8
	intT           shift, and enter state 9
	true           shift, and enter state 10
	false          shift, and enter state 11
	unitTerm       shift, and enter state 12
	"\\"           shift, and enter state 13
	"λ"            shift, and enter state 14
	fst            shift, and enter state 15
	snd            shift, and enter state 16
	inl            shift, and enter state 17
	inr            shift, and enter state 18
	let            shift, and enter state 19
	box            shift, and enter state 20

	Term           goto state 101

State 96

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)
	Type -> Type "+" Type .                             (rule 35)

	"→"            reduce using rule 35
	"×"            reduce using rule 35
	"+"            reduce using rule 35
	"@"            reduce using rule 35
	":"            reduce using rule 35
	app            reduce using rule 35
	","            reduce using rule 35
	"("            reduce using rule 35
	")"            reduce using rule 35
	"⟨"            reduce using rule 35
	"⟩"            reduce using rule 35
	"]"            reduce using rule 35
	id             reduce using rule 35
	modId          reduce using rule 35
	intT           reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	unitTerm       reduce using rule 35
	"\\"           reduce using rule 35
	"λ"            reduce using rule 35
	fst            reduce using rule 35
	snd            reduce using rule 35
	inl            reduce using rule 35
	inr            reduce using rule 35
	let            reduce using rule 35
	box            reduce using rule 35
	in             reduce using rule 35
	%eof           reduce using rule 35


State 97

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type "×" Type .                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)

	"→"            reduce using rule 34
	"×"            reduce using rule 34
	"+"            reduce using rule 34
	"@"            reduce using rule 34
	":"            reduce using rule 34
	app            reduce using rule 34
	","            reduce using rule 34
	"("            reduce using rule 34
	")"            reduce using rule 34
	"⟨"            reduce using rule 34
	"⟩"            reduce using rule 34
	"]"            reduce using rule 34
	id             reduce using rule 34
	modId          reduce using rule 34
	intT           reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	unitTerm       reduce using rule 34
	"\\"           reduce using rule 34
	"λ"            reduce using rule 34
	fst            reduce using rule 34
	snd            reduce using rule 34
	inl            reduce using rule 34
	inr            reduce using rule 34
	let            reduce using rule 34
	box            reduce using rule 34
	in             reduce using rule 34
	%eof           reduce using rule 34


State 98

	Type -> Type . "→" Type                             (rule 33)
	Type -> Type "→" Type .                             (rule 33)
	Type -> Type . "×" Type                             (rule 34)
	Type -> Type . "+" Type                             (rule 35)

	"→"            shift, and enter state 82
	"×"            shift, and enter state 83
	"+"            shift, and enter state 84
	"@"            reduce using rule 33
	":"            reduce using rule 33
	app            reduce using rule 33
	","            reduce using rule 33
	"("            reduce using rule 33
	")"            reduce using rule 33
	"⟨"            reduce using rule 33
	"⟩"            reduce using rule 33
	"]"            reduce using rule 33
	id             reduce using rule 33
	modId          reduce using rule 33
	intT           reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	unitTerm       reduce using rule 33
	"\\"           reduce using rule 33
	"λ"            reduce using rule 33
	fst            reduce using rule 33
	snd            reduce using rule 33
	inl            reduce using rule 33
	inr            reduce using rule 33
	let            reduce using rule 33
	box            reduce using rule 33
	in             reduce using rule 33
	%eof           reduce using rule 33


State 99

	Type -> "(" Type ")" .                              (rule 36)

	"→"            reduce using rule 36
	"×"            reduce using rule 36
	"+"            reduce using rule 36
	"@"            reduce using rule 36
	":"            reduce using rule 36
	app            reduce using rule 36
	","            reduce using rule 36
	"("            reduce using rule 36
	")"            reduce using rule 36
	"⟨"            reduce using rule 36
	"⟩"            reduce using rule 36
	"]"            reduce using rule 36
	id             reduce using rule 36
	modId          reduce using rule 36
	intT           reduce using rule 36
	true           reduce using rule 36
	false          reduce using rule 36
	unitTerm       reduce using rule 36
	"\\"           reduce using rule 36
	"λ"            reduce using rule 36
	fst            reduce using rule 36
	snd            reduce using rule 36
	inl            reduce using rule 36
	inr            reduce using rule 36
	let            reduce using rule 36
	box            reduce using rule 36
	in             reduce using rule 36
	%eof           reduce using rule 36


State 100

	Term -> app "(" Term "," Term ")" .                 (rule 1)

	"@"            reduce using rule 1
	":"            reduce using rule 1
	app            reduce using rule 1
	","            reduce using rule 1
	"("            reduce using rule 1
	")"            reduce using rule 1
	"⟨"            reduce using rule 1
	"⟩"            reduce using rule 1
	id             reduce using rule 1
	modId          reduce using rule 1
	intT           reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	unitTerm       reduce using rule 1
	"\\"           reduce using rule 1
	"λ"            reduce using rule 1
	fst            reduce using rule 1
	snd            reduce using rule 1
	inl            reduce using rule 1
	inr            reduce using rule 1
	let            reduce using rule 1
	box            reduce using rule 1
	in             reduce using rule 1
	%eof           reduce using rule 1


State 101

	Term -> let val id "=" Term in Term .               (rule 21)

	"@"            reduce using rule 21
	":"            reduce using rule 21
	app            reduce using rule 21
	","            reduce using rule 21
	"("            reduce using rule 21
	")"            reduce using rule 21
	"⟨"            reduce using rule 21
	"⟩"            reduce using rule 21
	id             reduce using rule 21
	modId          reduce using rule 21
	intT           reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	unitTerm       reduce using rule 21
	"\\"           reduce using rule 21
	"λ"            reduce using rule 21
	fst            reduce using rule 21
	snd            reduce using rule 21
	inl            reduce using rule 21
	inr            reduce using rule 21
	let            reduce using rule 21
	box            reduce using rule 21
	in             reduce using rule 21
	%eof           reduce using rule 21


State 102

	Term -> let box modId "=" Term in Term .            (rule 20)

	"@"            reduce using rule 20
	":"            reduce using rule 20
	app            reduce using rule 20
	","            reduce using rule 20
	"("            reduce using rule 20
	")"            reduce using rule 20
	"⟨"            reduce using rule 20
	"⟩"            reduce using rule 20
	id             reduce using rule 20
	modId          reduce using rule 20
	intT           reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	unitTerm       reduce using rule 20
	"\\"           reduce using rule 20
	"λ"            reduce using rule 20
	fst            reduce using rule 20
	snd            reduce using rule 20
	inl            reduce using rule 20
	inr            reduce using rule 20
	let            reduce using rule 20
	box            reduce using rule 20
	in             reduce using rule 20
	%eof           reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 43
Number of terminals: 35
Number of non-terminals: 9
Number of states: 103
