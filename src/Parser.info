-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Term                               (0)
	Term -> app "(" Term "," Term ")"                  (1)
	Term -> intT                                       (2)
	Term -> true                                       (3)
	Term -> false                                      (4)
	Term -> unitTerm                                   (5)
	Term -> id                                         (6)
	Term -> "\\" id "." Term                           (7)
	Term -> "λ" id "." Term                            (8)
	Term -> fst Term                                   (9)
	Term -> snd Term                                   (10)
	Term -> inl Term                                   (11)
	Term -> inr Term                                   (12)
	Term -> "(" Term ")"                               (13)
	Term -> ann Term Type                              (14)
	Type -> Type "→" Type                              (15)
	Type -> Type "×" Type                              (16)
	Type -> Type "+" Type                              (17)
	Type -> id                                         (18)
	Type -> bool                                       (19)
	Type -> int                                        (20)
	Type -> unit                                       (21)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	unit           { UnitTyTok }
	int            { IntTyTok }
	bool           { BoolTyTok }
	"→"            { ArrowTok }
	"×"            { ProdTyTok }
	"+"            { SumTok }
	ann            { AnnTok }
	app            { AppTok }
	","            { CommaTok }
	"("            { LParen }
	")"            { RParen }
	id             { IdTok $$ }
	intT           { IntTok $$ }
	true           { TrueTok }
	false          { FalseTok }
	unitTerm       { UnitTermTok }
	"\\"           { LambdaTok }
	"λ"            { LambdaTok }
	"."            { LambdaBodyTok }
	fst            { FstTok }
	snd            { SndTok }
	inl            { InlTok }
	inr            { InrTok }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Term            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
	Type            rules 15, 16, 17, 18, 19, 20, 21

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 3

State 1


	app            shift, and enter state 2


State 2

	Term -> app . "(" Term "," Term ")"                 (rule 1)

	"("            shift, and enter state 25


State 3

	%start_parse -> Term .                              (rule 0)

	%eof           accept


State 4

	Term -> ann . Term Type                             (rule 14)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 24

State 5

	Term -> "(" . Term ")"                              (rule 13)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 23

State 6

	Term -> id .                                        (rule 6)

	unit           reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	","            reduce using rule 6
	")"            reduce using rule 6
	id             reduce using rule 6
	%eof           reduce using rule 6


State 7

	Term -> intT .                                      (rule 2)

	unit           reduce using rule 2
	int            reduce using rule 2
	bool           reduce using rule 2
	","            reduce using rule 2
	")"            reduce using rule 2
	id             reduce using rule 2
	%eof           reduce using rule 2


State 8

	Term -> true .                                      (rule 3)

	unit           reduce using rule 3
	int            reduce using rule 3
	bool           reduce using rule 3
	","            reduce using rule 3
	")"            reduce using rule 3
	id             reduce using rule 3
	%eof           reduce using rule 3


State 9

	Term -> false .                                     (rule 4)

	unit           reduce using rule 4
	int            reduce using rule 4
	bool           reduce using rule 4
	","            reduce using rule 4
	")"            reduce using rule 4
	id             reduce using rule 4
	%eof           reduce using rule 4


State 10

	Term -> unitTerm .                                  (rule 5)

	unit           reduce using rule 5
	int            reduce using rule 5
	bool           reduce using rule 5
	","            reduce using rule 5
	")"            reduce using rule 5
	id             reduce using rule 5
	%eof           reduce using rule 5


State 11

	Term -> "\\" . id "." Term                          (rule 7)

	id             shift, and enter state 22


State 12

	Term -> "λ" . id "." Term                           (rule 8)

	id             shift, and enter state 21


State 13

	Term -> fst . Term                                  (rule 9)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 20

State 14

	Term -> snd . Term                                  (rule 10)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 19

State 15

	Term -> inl . Term                                  (rule 11)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 18

State 16

	Term -> inr . Term                                  (rule 12)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 17

State 17

	Term -> inr Term .                                  (rule 12)

	unit           reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	id             reduce using rule 12
	%eof           reduce using rule 12


State 18

	Term -> inl Term .                                  (rule 11)

	unit           reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	","            reduce using rule 11
	")"            reduce using rule 11
	id             reduce using rule 11
	%eof           reduce using rule 11


State 19

	Term -> snd Term .                                  (rule 10)

	unit           reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	","            reduce using rule 10
	")"            reduce using rule 10
	id             reduce using rule 10
	%eof           reduce using rule 10


State 20

	Term -> fst Term .                                  (rule 9)

	unit           reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	","            reduce using rule 9
	")"            reduce using rule 9
	id             reduce using rule 9
	%eof           reduce using rule 9


State 21

	Term -> "λ" id . "." Term                           (rule 8)

	"."            shift, and enter state 34


State 22

	Term -> "\\" id . "." Term                          (rule 7)

	"."            shift, and enter state 33


State 23

	Term -> "(" Term . ")"                              (rule 13)

	")"            shift, and enter state 32


State 24

	Term -> ann Term . Type                             (rule 14)

	unit           shift, and enter state 28
	int            shift, and enter state 29
	bool           shift, and enter state 30
	id             shift, and enter state 31

	Type           goto state 27

State 25

	Term -> app "(" . Term "," Term ")"                 (rule 1)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 26

State 26

	Term -> app "(" Term . "," Term ")"                 (rule 1)

	","            shift, and enter state 40


State 27

	Term -> ann Term Type .                             (rule 14)
	Type -> Type . "→" Type                             (rule 15)
	Type -> Type . "×" Type                             (rule 16)
	Type -> Type . "+" Type                             (rule 17)

	unit           reduce using rule 14
	int            reduce using rule 14
	bool           reduce using rule 14
	"→"            shift, and enter state 37
	"×"            shift, and enter state 38
	"+"            shift, and enter state 39
	","            reduce using rule 14
	")"            reduce using rule 14
	id             reduce using rule 14
	%eof           reduce using rule 14


State 28

	Type -> unit .                                      (rule 21)

	unit           reduce using rule 21
	int            reduce using rule 21
	bool           reduce using rule 21
	"→"            reduce using rule 21
	"×"            reduce using rule 21
	"+"            reduce using rule 21
	","            reduce using rule 21
	")"            reduce using rule 21
	id             reduce using rule 21
	%eof           reduce using rule 21


State 29

	Type -> int .                                       (rule 20)

	unit           reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	"→"            reduce using rule 20
	"×"            reduce using rule 20
	"+"            reduce using rule 20
	","            reduce using rule 20
	")"            reduce using rule 20
	id             reduce using rule 20
	%eof           reduce using rule 20


State 30

	Type -> bool .                                      (rule 19)

	unit           reduce using rule 19
	int            reduce using rule 19
	bool           reduce using rule 19
	"→"            reduce using rule 19
	"×"            reduce using rule 19
	"+"            reduce using rule 19
	","            reduce using rule 19
	")"            reduce using rule 19
	id             reduce using rule 19
	%eof           reduce using rule 19


State 31

	Type -> id .                                        (rule 18)

	unit           reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	"→"            reduce using rule 18
	"×"            reduce using rule 18
	"+"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	id             reduce using rule 18
	%eof           reduce using rule 18


State 32

	Term -> "(" Term ")" .                              (rule 13)

	unit           reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	","            reduce using rule 13
	")"            reduce using rule 13
	id             reduce using rule 13
	%eof           reduce using rule 13


State 33

	Term -> "\\" id "." . Term                          (rule 7)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 36

State 34

	Term -> "λ" id "." . Term                           (rule 8)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 35

State 35

	Term -> "λ" id "." Term .                           (rule 8)

	unit           reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	","            reduce using rule 8
	")"            reduce using rule 8
	id             reduce using rule 8
	%eof           reduce using rule 8


State 36

	Term -> "\\" id "." Term .                          (rule 7)

	unit           reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	","            reduce using rule 7
	")"            reduce using rule 7
	id             reduce using rule 7
	%eof           reduce using rule 7


State 37

	Type -> Type "→" . Type                             (rule 15)

	unit           shift, and enter state 28
	int            shift, and enter state 29
	bool           shift, and enter state 30
	id             shift, and enter state 31

	Type           goto state 44

State 38

	Type -> Type "×" . Type                             (rule 16)

	unit           shift, and enter state 28
	int            shift, and enter state 29
	bool           shift, and enter state 30
	id             shift, and enter state 31

	Type           goto state 43

State 39

	Type -> Type "+" . Type                             (rule 17)

	unit           shift, and enter state 28
	int            shift, and enter state 29
	bool           shift, and enter state 30
	id             shift, and enter state 31

	Type           goto state 42

State 40

	Term -> app "(" Term "," . Term ")"                 (rule 1)

	ann            shift, and enter state 4
	app            shift, and enter state 2
	"("            shift, and enter state 5
	id             shift, and enter state 6
	intT           shift, and enter state 7
	true           shift, and enter state 8
	false          shift, and enter state 9
	unitTerm       shift, and enter state 10
	"\\"           shift, and enter state 11
	"λ"            shift, and enter state 12
	fst            shift, and enter state 13
	snd            shift, and enter state 14
	inl            shift, and enter state 15
	inr            shift, and enter state 16

	Term           goto state 41

State 41

	Term -> app "(" Term "," Term . ")"                 (rule 1)

	")"            shift, and enter state 45


State 42

	Type -> Type . "→" Type                             (rule 15)
	Type -> Type . "×" Type                             (rule 16)
	Type -> Type . "+" Type                             (rule 17)
	Type -> Type "+" Type .                             (rule 17)

	unit           reduce using rule 17
	int            reduce using rule 17
	bool           reduce using rule 17
	"→"            reduce using rule 17
	"×"            reduce using rule 17
	"+"            reduce using rule 17
	","            reduce using rule 17
	")"            reduce using rule 17
	id             reduce using rule 17
	%eof           reduce using rule 17


State 43

	Type -> Type . "→" Type                             (rule 15)
	Type -> Type . "×" Type                             (rule 16)
	Type -> Type "×" Type .                             (rule 16)
	Type -> Type . "+" Type                             (rule 17)

	unit           reduce using rule 16
	int            reduce using rule 16
	bool           reduce using rule 16
	"→"            reduce using rule 16
	"×"            reduce using rule 16
	"+"            reduce using rule 16
	","            reduce using rule 16
	")"            reduce using rule 16
	id             reduce using rule 16
	%eof           reduce using rule 16


State 44

	Type -> Type . "→" Type                             (rule 15)
	Type -> Type "→" Type .                             (rule 15)
	Type -> Type . "×" Type                             (rule 16)
	Type -> Type . "+" Type                             (rule 17)

	unit           reduce using rule 15
	int            reduce using rule 15
	bool           reduce using rule 15
	"→"            shift, and enter state 37
	"×"            shift, and enter state 38
	"+"            shift, and enter state 39
	","            reduce using rule 15
	")"            reduce using rule 15
	id             reduce using rule 15
	%eof           reduce using rule 15


State 45

	Term -> app "(" Term "," Term ")" .                 (rule 1)

	unit           reduce using rule 1
	int            reduce using rule 1
	bool           reduce using rule 1
	","            reduce using rule 1
	")"            reduce using rule 1
	id             reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 22
Number of terminals: 23
Number of non-terminals: 3
Number of states: 46
